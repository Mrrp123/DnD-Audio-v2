#:kivy 2.2.0

#:import dp kivy.metrics.dp
#:import shaders tools.shaders
#:import app_folder tools.common_vars.app_folder
#:import default_bold_font_name tools.common_vars.default_bold_font_name
#:import default_font_name tools.common_vars.default_font_name
#:import CoreLabel kivy.core.text.Label

<Label>:
    font_name: default_bold_font_name

<TextInput>:
    font_name: default_font_name

<MainDisplay>:

    Image:
        id: background
        canvas:
            Rectangle:
                size: root.size
                pos: self.pos
                texture: self.texture

    Button:
        id: song_page
        bold: True
        width: min(app.height / 4, app.width / 3)
        height: app.height / 10
        background_color: 1,1,1,0
        color: 0, 1, 1, 1
        disabled_color: 0, 1, 1, 1
        x: app.width - self.width
        y: app.height - self.height
        size_hint: None, None
        text: "Library \u203A"
        halign: "right"
        valign: "top"
        text_size: self.size
        font_size: app.height/32
        padding: (0, "11dp", "12dp", 0)
        on_press: self.color = 0, 0.5, 0.5, 1
        on_touch_up: self.color = 0, 1, 1, 1
        on_release:
            root.parent.manager.transition.direction = "left"
            root.parent.manager.current = "library"

    Button:
        id: settings
        bold: True
        width: min(app.height / 4, app.width / 3)
        height: app.height / 10
        background_color: 1,1,1,0
        color: 0, 1, 1, 1
        disabled_color: 0, 1, 1, 1
        x: 0
        y: app.height - self.height
        size_hint: None, None
        text: "\u2039 Settings"
        halign: "left"
        valign: "top"
        text_size: self.size
        font_size: app.height/32
        padding: ("12dp", "11dp", 0, 0)
        on_press: self.color = 0, 0.5, 0.5, 1
        on_touch_up: self.color = 0, 1, 1, 1
        on_release:
            root.parent.manager.transition.direction = "right"
            root.parent.manager.current = "settings"
    
    Image:
        id: song_cover
        source: f"{app_folder}/assets/covers/default_cover.png"
        #color: 1,1,1,0.5
        size_hint: None, None
        size: app.height * (1/3), min(1/self.image_ratio * app.height * (1/3), app.height * (1/3))
        x: -app.width * 2
        fit_mode: "scale-down"
        mipmap: True
        canvas:
            # Create mask for rounded rectangle for song cover
            StencilPush 
            Color:
                rgba: 1,1,1,1
            RoundedRectangle:
                size: self.size
                pos: app.width / 2 - self.size[0] / 2, app.height - self.size[1] / 2 - app.height * (1/3)
                radius: self.size[1] / 12,
            
            # Draw song cover
            StencilUse
            Rectangle:
                texture: self.texture
                size: self.size
                pos: app.width / 2 - self.size[0] / 2, app.height - self.size[1] / 2 - app.height * (1/3)

            # Remove mask (so that we can draw the rest of the frame)
            StencilUnUse
            Color:
                rgba: 1,1,1,1
            RoundedRectangle:
                size: self.size
                pos: app.width / 2 - self.size[0] / 2, app.height - self.size[1] / 2 - app.height * (1/3)
                radius: self.size[1] / 12,

            # Clear the stencil object
            StencilPop
    

    Slider:
        id: audio_position_slider
        min: 0
        max: 1000
        size_hint: None, None
        width: app.width * (11/12) - dp(32)
        height: "48dp"
        disabled: True
        background_horizontal: f"{app_folder}/assets/buttons/empty.png"
        cursor_image: f"{app_folder}/assets/buttons/empty.png"
        background_disabled_horizontal: f"{app_folder}/assets/buttons/empty.png"
        cursor_disabled_image: f"{app_folder}/assets/buttons/empty.png"
        center_x: app.width * (1/2)
        center_y: app.height * (1/3)
        padding: 0
        on_touch_down: root.begin_seek(args[1])
        on_touch_move: root.update_seek(args[1])
        on_touch_up: root.end_seek(args[1])
        canvas:
            # Draw background rail for track position
            Color:
                rgba: 0.5,0.5,0.5,1
            RoundedRectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0], self.height / 8
                radius: self.height / 16,

            # Create mask for active rail for track pos
            StencilPush 
            RoundedRectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0], self.height / 8
                radius: self.height / 16,
            
            # Draw active rail
            StencilUse
            Color:
                rgba: 1,1,1,1
            Rectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0] * self.value_normalized, self.height / 8

            # Remove mask (so that we can draw the rest of the frame)
            StencilUnUse
            RoundedRectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0], self.height / 8
                radius: self.height / 16,

            # Clear the stencil object
            StencilPop
    
    Slider:
        id: volume_slider
        min: 0
        max: 100
        size_hint: None, None
        width: app.width * (3/4) - dp(32)
        height: "48dp"
        # disabled: False
        background_horizontal: f"{app_folder}/assets/buttons/empty.png"
        cursor_image: f"{app_folder}/assets/buttons/empty.png"
        background_disabled_horizontal: f"{app_folder}/assets/buttons/empty.png"
        cursor_disabled_image: f"{app_folder}/assets/buttons/empty.png"
        center_x: app.width * (1/2)
        center_y: app.height * (1/7)
        padding: 0
        on_touch_down: root.begin_change_volume(args[1])
        on_touch_move: root.update_volume(args[1])
        on_touch_up: root.end_change_volume(args[1])
        canvas:
            # Draw background rail
            Color:
                rgba: 0.5,0.5,0.5,1
            RoundedRectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0], self.height / 8
                radius: self.height / 16,

            # Create mask for active rail
            StencilPush 
            RoundedRectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0], self.height / 8
                radius: self.height / 16,
            
            # Draw active rail
            StencilUse
            Color:
                rgba: 1,1,1,1
            Rectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0] * self.value_normalized, self.height / 8

            # Remove mask (so that we can draw the rest of the frame)
            StencilUnUse
            RoundedRectangle:
                pos: self.pos[0], self.pos[1] + self.height / 2 - self.height / 16
                size: self.size[0], self.height / 8
                radius: self.height / 16,

            # Clear the stencil object
            StencilPop
    
    Image:
        id: volume_min_img
        source: f"{app_folder}/assets/buttons/volume_min.png"
        #color: 1,1,1,0.5
        size_hint: None, None
        size: dp(16), dp(16)
        x: volume_slider.x - dp(20)
        y: volume_slider.center_y - self.height/2
        fit_mode: "scale-down"
        mipmap: True
    
    Image:
        id: volume_max_img
        source: f"{app_folder}/assets/buttons/volume_max.png"
        #color: 1,1,1,0.5
        size_hint: None, None
        size: dp(16), dp(16)
        x: volume_slider.x + volume_slider.width + dp(10)
        y: volume_slider.center_y - self.height/2
        fit_mode: "scale-down"
        mipmap: True
            

    
    Label:
        id: track_pos
        bold: True
        color: 1,1,1,1
        disabled_color: 1,1,1,1
        size_hint: None, None
        x: 0
        y: audio_position_slider.center_y - dp(8) - self.height
        #center_y: app.height * (13/48)
        halign: "left"
        text: "0:00"
        text_size: app.width/2 - 1, None
        size: self.texture_size
        font_size: app.height/46
        padding: audio_position_slider.x + dp(2), 0, 0, 0

    
    Label:
        id: neg_track_pos
        bold: True
        color: 1,1,1,1
        disabled_color: 1,1,1,1
        size_hint: None, None
        x: app.width/2
        y: audio_position_slider.center_y - dp(8) - self.height
        #center_y: app.height * (13/48)
        halign: "right"
        text: "-0:00"
        text_size: app.width/2, None
        size: self.texture_size
        font_size: app.height/46
        padding: 0, 0, audio_position_slider.x + dp(2), 0


    ScrollView:
        id: track_artist_scrollview
        x: round(app.width * (1/2) - (app.width * (11/12) - dp(32)) / 2 + dp(2))
        y: app.height * (1/3) + dp(20)
        size_hint: None, None
        size: app.width - 2 * self.x, app.height/22
        do_scroll_x: False # We just want to scroll, but don't want the user to do it
        do_scroll_y: False
        bar_color: 0,0,0,0
        bar_inactive_color: 0,0,0,0
        # For some reason, this is needed to make text not blurry
        on_pos: self.pos = tuple(map(int, args[1]))
        on_size: self.size = tuple(map(int, args[1]))
        
        TrackLabelShader:
            id: track_artist
            label_type: "artist"
            bold: True
            color: 0.9, 0.9, 0.9, 0.6
            disabled_color: 0.9, 0.9, 0.9, 0.6
            size_hint: None, None
            halign: "left"
            text: ""
            size: self.texture_size
            font_size: app.height/35

    ScrollView:
        id: track_name_scrollview
        x: round(app.width * (1/2) - (app.width * (11/12) - dp(32)) / 2 + dp(2))
        center_y: (track_artist_scrollview.center_y + app.height/22 - app.height/88)# + app.height/35
        size_hint: None, None
        size: app.width - 2 * self.x, app.height/22
        do_scroll_x: False # We just want to scroll, but don't want the user to do it
        do_scroll_y: False
        bar_color: 0,0,0,0
        bar_inactive_color: 0,0,0,0
        # For some reason, this is needed to make text not blurry
        on_pos: self.pos = tuple(map(int, args[1]))
        on_size: self.size = tuple(map(int, args[1]))
        
        TrackLabelShader:
            id: track_name
            label_type: "name"
            bold: True
            color: 1,1,1,1
            disabled_color: 1,1,1,1
            size_hint: None, None
            halign: "left"
            text: ""
            size: self.texture_size
            font_size: app.height/35
        

    Button:
        id: previous_track
        bold: True
        size_hint: None, None
        width: app.height * (15/224)
        height: self.width
        x: app.width * (1/4) - self.width / 2
        y: (audio_position_slider.center_y + volume_slider.center_y) / 2 - self.height / 2
        disabled: True
        # center_x: app.width * (1/4)
        # center_y: app.height * (1/6)
        on_touch_up: root.get_tap_type(args[1])

        background_normal: f"{app_folder}/assets/buttons/backward_skip_normal.png"
        background_disabled_normal: f"{app_folder}/assets/buttons/backward_skip_normal.png"
        background_down: f"{app_folder}/assets/buttons/backward_skip_pressed.png"
        background_disabled_down: f"{app_folder}/assets/buttons/backward_skip_pressed.png"
        border: (0,0,0,0)
    
    Button:
        id: next_track
        bold: True
        size_hint: None, None
        width: app.height * (15/224)
        height: self.width
        x: app.width * (3/4) - self.width / 2
        y: (audio_position_slider.center_y + volume_slider.center_y) / 2 - self.height / 2
        disabled: True
        # center_x: app.width * (3/4)
        # center_y: app.height * (1/6)
        on_touch_up: root.get_tap_type(args[1])
        
        background_normal: f"{app_folder}/assets/buttons/forward_skip_normal.png"
        background_disabled_normal: f"{app_folder}/assets/buttons/forward_skip_normal.png"
        background_down: f"{app_folder}/assets/buttons/forward_skip_pressed.png"
        background_disabled_down: f"{app_folder}/assets/buttons/forward_skip_pressed.png"
        border: (0,0,0,0)
    
    Button:
        id: pause
        bold: True
        size_hint: None, None
        width: app.height * (15/224)
        height: self.width
        x: app.width * (1/2) - self.width / 2
        y: (audio_position_slider.center_y + volume_slider.center_y) / 2 - self.height / 2
        # center_x: app.width * (1/2)
        # center_y: app.height * (1/6)
        on_release: root.pause_music()

        background_normal: f"{app_folder}/assets/buttons/play_normal.png"
        background_disabled_normal: f"{app_folder}/assets/buttons/pause_normal.png"
        background_down: f"{app_folder}/assets/buttons/play_pressed.png"
        background_disabled_down: f"{app_folder}/assets/buttons/pause_pressed.png"
        border: (0,0,0,0)
    
    Button:
        id: reverse
        bold: True
        size_hint: None, None
        width: app.height * (12/224)
        height: self.width
        center_x: previous_track.center_x
        center_y: volume_slider.center_y / 2
        on_release: root.reverse()

        background_normal: f"{app_folder}/assets/buttons/reverse_normal.png"
        background_disabled_normal: f"{app_folder}/assets/buttons/reverse_normal.png"
        background_down: f"{app_folder}/assets/buttons/reverse_pressed.png"
        background_disabled_down: f"{app_folder}/assets/buttons/reverse_pressed.png"
        border: (0,0,0,0)

    Button:
        id: zawarudo
        bold: True
        size_hint: None, None
        width: app.height * (15/224)
        height: self.width
        disabled_color: 1,1,1,1
        background_color: 0,1,1,1
        disabled_background_color: 0,1,1,1
        x: app.width * (1/2) - self.width/2
        center_x: app.width * (1/2)
        center_y: app.height * (11/12)
        text: "ZA WARUDO!!!"
        on_release: root.stop_time()

        border: (0,0,0,0)
    
    Button:
        id: shuffle
        bold: True
        size_hint: None, None
        width: app.height * (15/224)
        height: self.width
        center_x: pause.center_x
        center_y: volume_slider.center_y / 2
        on_release: root.toggle_shuffle_mode()

        background_normal: f"{app_folder}/assets/buttons/shuffle_inactive_normal.png"
        background_disabled_normal: f"{app_folder}/assets/buttons/shuffle_inactive_normal.png"
        background_down: f"{app_folder}/assets/buttons/shuffle_inactive_pressed.png"
        background_disabled_down: f"{app_folder}/assets/buttons/shuffle_inactive_pressed.png"
        border: (0,0,0,0)
    
    Button:
        id: repeat
        bold: True
        size_hint: None, None
        width: app.height * (15/224)
        height: self.width
        center_x: next_track.center_x
        center_y: volume_slider.center_y / 2
        on_release: root.toggle_repeat_mode()

        background_normal: f"{app_folder}/assets/buttons/repeat_inactive_normal.png"
        background_disabled_normal: f"{app_folder}/assets/buttons/repeat_inactive_normal.png"
        background_down: f"{app_folder}/assets/buttons/repeat_inactive_pressed.png"
        background_disabled_down: f"{app_folder}/assets/buttons/repeat_inactive_pressed.png"
        border: (0,0,0,0)

    
        
    

<SongButton>:
    image: ""
    background_color: 0,0,0,1
    canvas.before:
        Color:
            rgba: self.background_color
        Rectangle:
            pos: self.pos
            size: self.size
    canvas.after:
        Color:
            rgba: 1,1,1,0.5
        Line:
            width: 1
            points: (root.height, self.y, root.width, self.y)

    Label:
        id: name_label
        pos: 0, root.y + root.height/2
        size: root.size[0], root.size[1]/2
        bold: True
        halign: "left"
        valign: "bottom"
        text_size: self.size
        font_size: app.height / 40
        shorten: True
        shorten_from: "right"
        size_hint: 1, None
        padding: root.height, 0, root.width / 12, 0

    Label:
        id: artist_label
        pos: 0, root.y
        size: root.size[0], root.size[1]/2
        bold: True
        halign: "left"
        valign: "top"
        text_size: self.size
        font_size: app.height / 50
        color: 2/3, 2/3, 2/3, 1
        shorten: True
        shorten_from: "right"
        size_hint: 1, None
        padding: root.height, 0, root.width / 12, 0

    Image:
        id: song_cover
        source: root.image#"./assets/covers/default_cover.png"
        size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
        x: -root.width
        fit_mode: "scale-down"
        mipmap: True
        canvas:
            # Create mask for rounded rectangle for song cover
            StencilPush 
            Color:
                rgba: 1,1,1,1
            RoundedRectangle:
                size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
                pos: self.parent.x + root.height * (1/6), self.parent.y + (root.height - min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))) / 2
                radius: self.size[1] / 12,
            
            # Draw song cover
            StencilUse
            Rectangle:
                texture: self.texture
                size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
                pos: self.parent.x + root.height * (1/6), self.parent.y + (root.height - min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))) / 2

            # Remove mask (so that we can draw the rest of the frame)
            StencilUnUse
            Color:
                rgba: 1,1,1,1
            RoundedRectangle:
                size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
                pos: self.parent.x + root.height * (1/6), self.parent.y + (root.height - min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))) / 2
                radius: self.size[1] / 12,

            # Clear the stencil object
            StencilPop

<SortButton>:
    orientation: "horizontal"
    text: ""
    checkbox_group: ""
    sort_by: "date_added"
    CheckBox:
        id: sort_checkbox
        group: root.checkbox_group
        size_hint_x: .2
        on_parent: root.sort_checkbox = self
    Label:
        text: root.text
        halign: "left"
        valign: "center"
        bold: True
        size_hint_x: .8
        text_size: self.size
        font_size: root.height * (35/64)
        color: 1, 1, 1, 1
        height: root.height
        padding: 0, 0, 0, 0


<TopSortButton>:
    canvas.before:
        Color:
            rgba: self.background_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: self.height/3, self.height/3, 0, 0
        Color:
            rgba: 1, 1, 1, 1
        Line:
            width: 1
            points: self.x, self.y, self.x + self.width, self.y

<MiddleSortButton>:
    canvas.before:
        Color:
            rgba: self.background_color
        Rectangle:
            size: self.size
            pos: self.pos
        Color:
            rgba: 1, 1, 1, 1
        Line:
            width: 1
            points: self.x, self.y, self.x + self.width, self.y

<BottomSortButton>:
    canvas.before:
        Color:
            rgba: self.background_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: 0, 0, self.height/3, self.height/3

<SoloSortButton>:
    canvas.before:
        Color:
            rgba: self.background_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: self.height/3, self.height/3, self.height/3, self.height/3


<SongsDisplayBase>:

    dropdown_sort_settings:
        {"text" : "Name", "sort_by" : "name"},\
        {"text" : "Artist", "sort_by" : "artist"},\
        {"text" : "Date Added", "sort_by" : "date_added"},\
        {"text" : "Last Played", "sort_by" : "play_date"},\
        {"text" : "Plays", "sort_by" : "play_count"}

    Button:
        id: back_button
        bold: True
        width: min(app.height / 4, app.width / 3)
        height: app.height / 10
        background_color: 1,1,1,0
        color: 0, 1, 1, 1
        x: 0
        y: app.height - self.height
        # text: "\u2039 Library"
        halign: "left"
        valign: "top"
        text_size: self.size
        # size: self.texture_size
        font_size: app.height/32
        padding: ("12dp", "11dp", 0, 0)
        on_press: self.color = 0, 0.5, 0.5, 1
        on_touch_up: self.color = 0, 1, 1, 1
        on_release: root.back_button_on_release()

    Label:
        id: main_label
        bold: True
        color: 1,1,1,1
        width: app.width
        height: app.height/15
        x: 0
        y: app.height - app.height / 6
        halign: "left"
        # text: "Songs"
        text_size: self.size
        #size: self.texture_size
        font_size: app.height/20
        padding: ("23dp", "15dp", 0, 0)


    Button:
        text: "Song Sort"
        halign: "center"
        valign: "center"
        x: app.width - self.width*2
        center_y: back_button.center_y - 2
        size: app.height/20, app.height/20
        #background_normal: "./assets/icon/icon.png"
        on_release: 
            dropdown.open(self)
            dropdown.x = self.x + self.width - dropdown.width

        # trick to not lose the DropDown instance
        # DropDown itself is not really made to be used in kv.
        __safe_id: [dropdown.__self__]

        border: (0,0,0,0)
        SortDropDown:
            id: dropdown
            auto_width: False
            width: app.width * 0.5
            on_kv_post: self.dismiss()
            sort_settings: root.dropdown_sort_settings

    TextInput: # This exists only to help the rounded rectangle figure out its height, it mimics the settings of track_search
        id: size_indicator
        background_color: 0,0,0,0
        foreground_color: 0,0,0,0
        disabled: True
        visible: False
        width: app.width - main_label.padding[0]*2
        height: self.minimum_height
        text_size: self.size 
        font_size: app.height/40
        font_name: "Roboto"
        padding: 6,6,6,6

    Widget:
        id: text_box_background
        canvas:
            Color:
                rgba: .2,.2,.2,.3
            RoundedRectangle:
                size: size_indicator.width + size_indicator.height / 2, size_indicator.size[1]
                pos: main_label.x + main_label.padding[0] - size_indicator.height / 4, app.height * (3/4)
                radius: size_indicator.height / 2,

    TextInput:
        id: track_search
        bold: True
        width: app.width - main_label.padding[0]*2
        height: self.minimum_height
        background_color: 0,0,0,0
        foreground_color: 1,1,1,1
        cursor_color: 1,1,1,1
        multiline: False
        x: main_label.x + main_label.padding[0]
        y: app.height * (3/4)
        halign: "left"
        # hint_text: "Search in Songs"
        text_size: self.size 
        font_size: app.height/40
        padding: size_indicator.padding
        on_text: root.on_text()
    
    RecycleView:
        id: track_list
        viewclass: "SongButton"
        width: app.width
        height: track_search.y - size_indicator.height
        bar_width: dp(10)
        scroll_type: ["bars", "content"]
        scroll_distance: 1
        RecycleBoxLayout:
            default_size: None, size_indicator.size[1]*2
            default_size_hint: 1, None
            size_hint: None, None
            height: self.minimum_height
            width: app.width
            orientation:  "vertical"
            background_color: 1,1,1,0.3

<SongsDisplay>:
    Button:
        id: add_song
        bold: True
        size_hint: None, None
        width: app.height * (11/224)
        height: self.width
        disabled_color: 1,1,1,1
        background_color: 0.23137254901960785,1,0.333,1 #3bff55ff
        disabled_background_color:0.23137254901960785,1,0.333,1
        x: dp(23) * 2 + CoreLabel(font_size=app.height/20, font_name=default_font_name).get_extents("Songs")[0]
        center_y: (app.height - app.height / 6) + app.height/30 #self.main_label.center_y
        text: "Add Song"
        on_release: app.filechooser.open_file(multiple=True, filters=["*.mp3;*.ogg;*.wav"], on_selection=app._add_file_handler)
        border: (0,0,0,0)

<SettingsDisplay>:

    # Image:
    #     id: background
    #     canvas:
    #         Rectangle:
    #             size: root.size
    #             pos: self.pos
    #             texture: self.texture

    Label:
        id: fade_slider_label
        bold: True
        color: 1,1,1,1
        x: 0
        y: app.height * (40/48)
        halign: "left"
        text: "Crossfade Duration:"
        text_size: app.width, None
        size: self.texture_size
        font_size: app.height/32
        padding: "32dp", 0, 0, 0
    
    Slider:
        id: fade_slider
        min: 0
        max: 12000
        step: 1000
        width: app.width * (3/4)
        height: "48dp"
        background_color: 1,1,1,1
        x: "16dp"
        center_y: app.height * (38/48)
        on_touch_up: root.change_fade_duration(args[1])
        padding: "16dp"
    
    Label:
        id: fade_slider_value
        bold: True
        color: 1,1,1,1
        x: fade_slider.x + fade_slider.width
        y: app.height * (38/48) - self.height/2
        halign: "left"
        text: f"{int(fade_slider.value / 1000)}s"
        text_size: app.width, None
        size: self.texture_size
        font_size: app.height/32
        padding: "8dp", 0, 0, 0
    
    Label:
        id: speed_slider_label
        bold: True
        color: 1,1,1,1
        x: 0
        y: app.height * (33/48)
        halign: "left"
        text: "Playback Speed:"
        text_size: app.width, None
        size: self.texture_size
        font_size: app.height/32
        padding: "32dp", 0, 0, 0

    Slider:
        id: speed_slider
        min: 50
        max: 200
        step: 5
        width: app.width * (3/4)
        height: 35
        #background_color: 1,1,1,1
        x: "16dp"
        center_y: app.height * (31/48)
        on_touch_up: root.change_speed(args[1])
        padding: "16dp"
    
    Label:
        id: speed_slider_value
        bold: True
        color: 1,1,1,1
        x: speed_slider.x + speed_slider.width
        y: app.height * (31/48) - self.height/2
        halign: "left"
        text: f"{speed_slider.value / 100:.2f}x"
        text_size: app.width, None
        size: self.texture_size
        font_size: app.height/32
        padding: "8dp", 0, 0, 0
    
    Label:
        id: fps
        bold: True
        color: 1,1,0,1
        center_x: app.width * (1/2)
        center_y: app.height * (1/2)
        text: "0"
    
    Label:
        id: debug_info
        bold: True
        color: 0,0.7,1,1
        center_x: app.width * (2/4)
        center_y: app.height * (3/16)
        halign: "left"
        text: "Audio player currently not active"
        text_size: app.width * (11/12), None
    
    Button:
        bold: True
        width: min(app.height / 4, app.width / 3)
        height: app.height / 10
        background_color: 1,1,1,0
        color: 0, 1, 1, 1
        x: app.width - self.width
        y: app.height - self.height
        text: "Back \u203A"
        halign: "right"
        valign: "top"
        text_size: self.size
        font_size: app.height/32
        padding: (0, "15dp", "12dp", 0)
        on_press: self.color = 0, 0.5, 0.5, 1
        on_touch_up: self.color = 0, 1, 1, 1
        on_release:
            root.parent.manager.transition.direction = "left"
            root.parent.manager.current = "main"


<ScreenSelectionButton>:
    image: ""
    image_color: 1, 1, 1, 1
    background_color: 0, 0, 0, 1
    canvas.before:
        Color:
            rgba: self.background_color
        Rectangle:
            pos: self.pos
            size: self.size
    canvas.after:
        Color:
            rgba: 1,1,1,0.5
        Line:
            width: 1
            # For some goofy, fuck ass reason, opengl lines are defined on half pixel boundaries
            # offset line by 0.5 to get true 1 px lines
            points: (self.height, round(self.y) + 0.5, self.width, round(self.y) + 0.5)

    Label:
        id: screen_label
        pos: 0, root.y
        size: root.size[0] - arrow_indicator.width, root.size[1]
        bold: True
        halign: "left"
        valign: "middle"
        text_size: self.size
        font_size: app.height / 35
        color: 1, 1, 1, 1
        shorten: True
        shorten_from: "right"
        size_hint: 1, None
        padding: root.height, 0, root.width / 12, 0
    
    Label:
        id: arrow_indicator
        pos: root.width - self.width, root.y
        size: root.size[1]/2, root.size[1]
        bold: True
        halign: "right"
        valign: "middle"
        text: "\u203A"
        text_size: self.size
        font_size: app.height / 30
        color: 1, 1, 1, 0.5
        size_hint: 1, None
        padding: 0, 0, root.height/4, 0

    Image:
        id: screen_icon
        source: root.image#"./assets/covers/default_cover.png"
        size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
        x: -root.width
        fit_mode: "scale-down"
        mipmap: True
        canvas:
            # Create mask for rounded rectangle for song cover
            StencilPush 
            RoundedRectangle:
                size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
                pos: self.parent.x + root.height * (1/6), self.parent.y + (root.height - min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))) / 2
                radius: self.size[1] / 12,
            
            # Draw song cover
            StencilUse
            Color:
                rgba: root.image_color
            Rectangle:
                texture: self.texture
                size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
                pos: self.parent.x + root.height * (1/6), self.parent.y + (root.height - min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))) / 2

            # Remove mask (so that we can draw the rest of the frame)
            StencilUnUse
            RoundedRectangle:
                size: root.height * (2/3), min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))
                pos: self.parent.x + root.height * (1/6), self.parent.y + (root.height - min(1/self.image_ratio * root.height * (2/3), root.height * (2/3))) / 2
                radius: self.size[1] / 12,

            # Clear the stencil object
            StencilPop

<LibraryDisplay>:

    Button:
        id: library_back
        bold: True
        width: min(app.height / 4, app.width / 3)
        height: app.height / 10
        background_color: 1,1,1,0
        color: 0, 1, 1, 1
        x: 0
        y: app.height - self.height
        text: "\u2039 Back"
        halign: "left"
        valign: "top"
        text_size: self.size
        # size: self.texture_size
        font_size: app.height/32
        padding: ("12dp", "15dp", 0, 0)
        on_press: self.color = 0, 0.5, 0.5, 1
        on_touch_up: self.color = 0, 1, 1, 1
        on_release:
            root.parent.manager.transition.direction = "right"
            root.parent.manager.current = "main"

    Label:
        id: library_label
        bold: True
        color: 1,1,1,1
        width: app.width/2
        height: app.height/20
        x: 0
        y: app.height - app.height / 6
        halign: "left"
        text: "Library"
        text_size: self.size
        #size: self.texture_size
        font_size: app.height/20
        padding: ("23dp", "15dp", 0, 0)

    BoxLayout:
        orientation: "vertical"
        width: app.width
        height: (CoreLabel(font_size=app.height/40).get_extents("_")[1]+12)*4 # Same size as size_indicator.height * 4 (what we use for songs page)
        x: 0
        y: round(library_label.y - self.height - library_label.height / 4) # round position else seperator lines look funny

        ScreenSelectionButton:
            id: playlists_button
            image: f"{app_folder}/assets/covers/playlists_icon.png"
            image_color: 0, 1, 1, 1
            screen_link_name: "playlists"
            display_name: "Playlists"
            
        
        ScreenSelectionButton:
            id: songs_button
            image: f"{app_folder}/assets/covers/songs_icon.png"
            image_color: 0, 1, 1, 1
            screen_link_name: "songs"
            display_name: "Songs"

<PlaylistsDisplay>:
    Button:
        id: playlists_back
        bold: True
        width: min(app.height / 4, app.width / 3)
        height: app.height / 10
        background_color: 1,1,1,0
        color: 0, 1, 1, 1
        x: 0
        y: app.height - self.height
        text: "\u2039 Library"
        halign: "left"
        valign: "top"
        text_size: self.size
        # size: self.texture_size
        font_size: app.height/32
        padding: ("12dp", "15dp", 0, 0)
        on_press: self.color = 0, 0.5, 0.5, 1
        on_touch_up: self.color = 0, 1, 1, 1
        on_release:
            root.parent.manager.transition.direction = "right"
            root.parent.manager.current = "library"
    
    Label:
        id: playlists_label
        bold: True
        color: 1,1,1,1
        width: app.width/2
        height: app.height/20
        x: 0
        y: app.height - app.height / 6
        halign: "left"
        text: "Playlists"
        text_size: self.size
        font_size: app.height/20
        padding: ("23dp", "15dp", 0, 0)
    
    TextInput: # This exists only to help the rounded rectangle figure out its height, it mimics the settings of playlist_search
        id: size_indicator
        background_color: 0,0,0,0
        foreground_color: 0,0,0,0
        disabled: True
        visible: False
        width: app.width - playlists_label.padding[0]*2
        height: self.minimum_height
        text_size: self.size 
        font_size: app.height/40
        padding: 6,6,6,6

    Widget:
        id: text_box_background
        canvas:
            Color:
                rgba: .2,.2,.2,.3
            RoundedRectangle:
                size: size_indicator.width + size_indicator.height / 2, size_indicator.size[1]
                pos: playlists_label.x + playlists_label.padding[0] - size_indicator.height / 4, app.height * (3/4)
                radius: size_indicator.height / 2,

    TextInput:
        id: playlist_search
        bold: True
        width: app.width - playlists_label.padding[0]*2
        height: self.minimum_height
        background_color: 0,0,0,0
        foreground_color: 1,1,1,1
        cursor_color: 1,1,1,1
        multiline: False
        x: playlists_label.x + playlists_label.padding[0]
        y: app.height * (3/4)
        halign: "left"
        hint_text: "Search in Playlists"
        text_size: self.size 
        font_size: app.height/40
        padding: size_indicator.padding
        on_text: root.on_text()
    
    RecycleView:
        id: playlists
        viewclass: "PlaylistButton"
        width: app.width
        height: playlist_search.y - playlist_search.height
        bar_width: dp(10)
        scroll_type: ["bars", "content"]
        scroll_distance: 1
        RecycleBoxLayout:
            default_size: None, size_indicator.size[1]*2
            default_size_hint: 1, None
            size_hint: None, None
            height: self.minimum_height
            width: app.width
            orientation:  "vertical"
            background_color: 1,1,1,0.3

<PlaylistSongsDisplay>:
    dropdown_sort_settings:
        {"text" : "Playlist Order", "sort_by" : "order"},\
        {"text" : "Name", "sort_by" : "name"},\
        {"text" : "Artist", "sort_by" : "artist"},\
        {"text" : "Date Added", "sort_by" : "date_added"},\
        {"text" : "Last Played", "sort_by" : "play_date"},\
        {"text" : "Plays", "sort_by" : "play_count"}
